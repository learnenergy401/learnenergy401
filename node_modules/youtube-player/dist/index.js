'use strict';

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sister = require('sister');

var _sister2 = _interopRequireDefault(_sister);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _loadYouTubeIframeAPI = require('./loadYouTubeIframeAPI');

var _loadYouTubeIframeAPI2 = _interopRequireDefault(_loadYouTubeIframeAPI);

var _YouTubePlayer = require('./YouTubePlayer');

var _YouTubePlayer2 = _interopRequireDefault(_YouTubePlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef options
 * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player
 * @param {Number} width
 * @param {Number} height
 * @param {String} videoId
 * @param {Object} playerVars
 * @param {Object} events
 */

var youtubeIframeAPI = undefined;

/**
 * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.
 *
 * @param {HTMLElement|String} elementId Either the DOM element or the id of the HTML element where the API will insert an <iframe>.
 * @param {YouTubePlayer~options} options
 * @returns {Object}
 */

exports.default = function (elementId) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var emitter = undefined,
        playerAPI = undefined,
        playerAPIReady = undefined;

    if (!youtubeIframeAPI) {
        youtubeIframeAPI = (0, _loadYouTubeIframeAPI2.default)();
    }

    playerAPI = {};
    emitter = (0, _sister2.default)();

    if (options.events) {
        throw new Error('Event handlers cannot be overwritten.');
    }

    if ((0, _isString3.default)(elementId) && !document.getElementById(elementId)) {
        throw new Error('Element "' + elementId + '" does not exist.');
    }

    options.events = _YouTubePlayer2.default.proxyEvents(emitter);

    playerAPIReady = new _bluebird2.default(function (resolve) {
        youtubeIframeAPI.then(function (YT) {
            return new YT.Player(elementId, options);
        }).then(function (player) {
            emitter.on('ready', function () {
                resolve(player);
            });
        });
    });

    playerAPI = _YouTubePlayer2.default.promisifyPlayer(playerAPIReady);
    playerAPI.on = emitter.on;

    return playerAPI;
};

module.exports = exports['default'];
//# sourceMappingURL=index.js.map
