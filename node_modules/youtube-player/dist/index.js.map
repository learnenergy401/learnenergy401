{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAI,4BAAJ;;;;;;;;;;kBASe,UAAC,SAAD,EAA6B;QAAjB,gEAAU,kBAAO;;AACxC,QAAI,mBAAJ;QACI,qBADJ;QAEI,0BAFJ,CADwC;;AAKxC,QAAI,CAAC,gBAAD,EAAmB;AACnB,2BAAmB,qCAAnB,CADmB;KAAvB;;AAIA,gBAAY,EAAZ,CATwC;AAUxC,cAAU,uBAAV,CAVwC;;AAYxC,QAAI,QAAQ,MAAR,EAAgB;AAChB,cAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN,CADgB;KAApB;;AAIA,QAAI,wBAAW,SAAX,KAAyB,CAAC,SAAS,cAAT,CAAwB,SAAxB,CAAD,EAAqC;AAC9D,cAAM,IAAI,KAAJ,CAAU,cAAc,SAAd,GAA0B,mBAA1B,CAAhB,CAD8D;KAAlE;;AAIA,YAAQ,MAAR,GAAiB,wBAAc,WAAd,CAA0B,OAA1B,CAAjB,CApBwC;;AAsBxC,qBAAiB,uBAAa,UAAC,OAAD,EAAa;AACvC,yBACK,IADL,CACU,UAAC,EAAD,EAAQ;AACV,mBAAO,IAAI,GAAG,MAAH,CAAU,SAAd,EAAyB,OAAzB,CAAP,CADU;SAAR,CADV,CAIK,IAJL,CAIU,UAAC,MAAD,EAAY;AACd,oBAAQ,EAAR,CAAW,OAAX,EAAoB,YAAM;AACtB,wBAAQ,MAAR,EADsB;aAAN,CAApB,CADc;SAAZ,CAJV,CADuC;KAAb,CAA9B,CAtBwC;;AAkCxC,gBAAY,wBAAc,eAAd,CAA8B,cAA9B,CAAZ,CAlCwC;AAmCxC,cAAU,EAAV,GAAe,QAAQ,EAAR,CAnCyB;;AAqCxC,WAAO,SAAP,CArCwC;CAA7B","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport Sister from 'sister';\nimport Bluebird from 'bluebird';\nimport loadYouTubeIframeAPI from './loadYouTubeIframeAPI';\nimport YouTubePlayer from './YouTubePlayer';\n\n/**\n * @typedef options\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n * @param {Number} width\n * @param {Number} height\n * @param {String} videoId\n * @param {Object} playerVars\n * @param {Object} events\n */\n\nlet youtubeIframeAPI;\n\n/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param {HTMLElement|String} elementId Either the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param {YouTubePlayer~options} options\n * @returns {Object}\n */\nexport default (elementId, options = {}) => {\n    let emitter,\n        playerAPI,\n        playerAPIReady;\n\n    if (!youtubeIframeAPI) {\n        youtubeIframeAPI = loadYouTubeIframeAPI();\n    }\n\n    playerAPI = {};\n    emitter = Sister();\n\n    if (options.events) {\n        throw new Error('Event handlers cannot be overwritten.');\n    }\n\n    if (_.isString(elementId) && !document.getElementById(elementId)) {\n        throw new Error('Element \"' + elementId + '\" does not exist.');\n    }\n\n    options.events = YouTubePlayer.proxyEvents(emitter);\n\n    playerAPIReady = new Bluebird((resolve) => {\n        youtubeIframeAPI\n            .then((YT) => {\n                return new YT.Player(elementId, options);\n            })\n            .then((player) => {\n                emitter.on('ready', () => {\n                    resolve(player);\n                });\n            });\n    });\n\n    playerAPI = YouTubePlayer.promisifyPlayer(playerAPIReady);\n    playerAPI.on = emitter.on;\n\n    return playerAPI;\n};\n"],"sourceRoot":"/source/"}