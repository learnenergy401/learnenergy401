{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAYA,IAAI,yBAAJ;;;;;;;;;;kBASe,UAAC,SAAD,EAA6B;AAAA,QAAjB,OAAiB,yDAAP,EAAO;;AACxC,QAAI,gBAAJ;QACI,kBADJ;QAEI,uBAFJ;;AAIA,QAAI,CAAC,gBAAL,EAAuB;AACnB,2BAAmB,qCAAnB;AACH;;AAED,gBAAY,EAAZ;AACA,cAAU,uBAAV;;AAEA,QAAI,QAAQ,MAAZ,EAAoB;AAChB,cAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,QAAI,wBAAW,SAAX,KAAyB,CAAC,SAAS,cAAT,CAAwB,SAAxB,CAA9B,EAAkE;AAC9D,cAAM,IAAI,KAAJ,CAAU,cAAc,SAAd,GAA0B,mBAApC,CAAN;AACH;;AAED,YAAQ,MAAR,GAAiB,wBAAc,WAAd,CAA0B,OAA1B,CAAjB;;AAEA,qBAAiB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACtC,yBACK,IADL,CACU,UAAC,EAAD,EAAQ;AACV,mBAAO,IAAI,GAAG,MAAP,CAAc,SAAd,EAAyB,OAAzB,CAAP;AACH,SAHL,EAIK,IAJL,CAIU,UAAC,MAAD,EAAY;AACd,oBAAQ,EAAR,CAAW,OAAX,EAAoB,YAAM;AACtB,wBAAQ,MAAR;AACH,aAFD;AAGH,SARL;AASH,KAVgB,CAAjB;;AAYA,gBAAY,wBAAc,eAAd,CAA8B,cAA9B,CAAZ;AACA,cAAU,EAAV,GAAe,QAAQ,EAAvB;;AAEA,WAAO,SAAP;AACH,C","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport Sister from 'sister';\nimport loadYouTubeIframeAPI from './loadYouTubeIframeAPI';\nimport YouTubePlayer from './YouTubePlayer';\n\n/**\n * @typedef options\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n * @param {Number} width\n * @param {Number} height\n * @param {String} videoId\n * @param {Object} playerVars\n * @param {Object} events\n */\n\nlet youtubeIframeAPI;\n\n/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param {HTMLElement|String} elementId Either the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param {YouTubePlayer~options} options\n * @returns {Object}\n */\nexport default (elementId, options = {}) => {\n    let emitter,\n        playerAPI,\n        playerAPIReady;\n\n    if (!youtubeIframeAPI) {\n        youtubeIframeAPI = loadYouTubeIframeAPI();\n    }\n\n    playerAPI = {};\n    emitter = Sister();\n\n    if (options.events) {\n        throw new Error('Event handlers cannot be overwritten.');\n    }\n\n    if (_.isString(elementId) && !document.getElementById(elementId)) {\n        throw new Error('Element \"' + elementId + '\" does not exist.');\n    }\n\n    options.events = YouTubePlayer.proxyEvents(emitter);\n\n    playerAPIReady = new Promise((resolve) => {\n        youtubeIframeAPI\n            .then((YT) => {\n                return new YT.Player(elementId, options);\n            })\n            .then((player) => {\n                emitter.on('ready', () => {\n                    resolve(player);\n                });\n            });\n    });\n\n    playerAPI = YouTubePlayer.promisifyPlayer(playerAPIReady);\n    playerAPI.on = emitter.on;\n\n    return playerAPI;\n};\n"]}